// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./prisma-client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String      @id @unique @default(uuid()) @db.Uuid
  phone         String      @unique
  name          String
  password      String
  role          Role        @default(USER)
  order         Order[]
  review        Review[]
}

enum Role {
  USER
  ADMIN
}

model Order {
  id            String      @id @unique @default(uuid()) @db.Uuid
  serviceID     String      @db.Uuid
  service       Service     @relation(fields: [serviceID], references: [id])
  doctorID      String      @db.Uuid
  doctor        Doctor      @relation(fields: [doctorID], references: [id])
  status        Status      @default(VACANT)
  date          DateTime
  userID        String      @db.Uuid
  user          User?       @relation(fields: [userID], references: [id])
}

enum Status {
  VACANT
  OCCUPIED
  CANCELED
  ARCHIVED
} 

model Service {
  id            String       @id @unique @default(uuid()) @db.Uuid
  name          String
  order         Order[] 
  desc          String
  prices        String
  image         String
  doctor        Doctor[]
  categoryID    String?       @db.Uuid
  category      Category?     @relation(fields: [categoryID], references: [id])
}

model Category {
  id            String       @id @unique @default(uuid()) @db.Uuid
  name          String
  service       Service[]
}

model Doctor {
  id            String       @id @unique @default(uuid()) @db.Uuid
  name          String
  desc          String
  reviews       Review[]
  image         String
  service       Service[]
  order         Order[]
  rating        Int
  showed        Boolean
}

model Review {
  id            String       @id @unique @default(uuid()) @db.Uuid
  userID        String       @db.Uuid
  user          User         @relation(fields: [userID], references: [id])
  rate          Int
  doctorID      String       @db.Uuid
  doctor        Doctor       @relation(fields: [doctorID], references: [id])
  text          String
}